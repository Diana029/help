##### 1. Проверяем на наличие пропусков NaN
for col in df.columns:
    nan_numbers = df[pd.isnull(df[col])].shape[0]
    if nan_numbers > 0:
        print(col, nan_numbers)

print ("Столбцов с NaN в датасете: {}".format(df.loc[:, df.isnull().any()].shape)) 

##### 2. Смотрим на соотношение классов в выборке
y = df['LABEL']
X = df.drop(['LABEL'],axis=1)
shape(X), shape(df)
print ("Not opened credit product 0: {}, \n Opened credit product 1: {}".format(
    1.0-(y.sum()/float(len(y))),
    y.sum()/float(len(y)))) 


##### 3. Scaling
def data_preprocess(df):
    final_data = df.copy()
    std_scaler = StandardScaler()
    final_data = std_scaler.fit_transform(final_data)
    return final_data


##### 4. Correlations with target variable
def CorrelationSelector(X,y):
    columns = X.columns[3:]
    corr_data = dict([(abs(np.corrcoef(X[c],y)[0,1]),c) for c in columns if math.isnan(abs(np.corrcoef(X[c],y)[0,1]))==False])
    sorted_corr_data = sorted(corr_data.items(), key=operator.itemgetter(0), reverse=True)
    return sorted_corr_data
corr = CorrelationSelector(X,y)
top_correlations = 10
corr_array = np.array(corr[:top_correlations])
plt.figure(figsize=(7,7))
plt.title("Top correlations")
plt.bar(range(top_correlations), corr_array[:,0][:top_correlations], align='center')
plt.xticks(range(top_correlations), corr_array[:,1][:top_correlations], rotation=90)
plt.xlim([-1, top_correlations]);

##### 5. Статистика по выборке
df.describe().T

##### 6. Строим функции плотности вероятности для признаков и смотрим на распределения
df.columns.values
plot_features = ['cnt_prd', 'NO_NDS_SUM_p', 'pa10', 'pa8', 'cnt_client_mng']
X_y = pd.concat((df[plot_features], df['LABEL']), axis=1)
new_palette = sns.color_palette("Paired")
sns.pairplot(X_y, vars=plot_features, hue="LABEL", 
             size=3, diag_kind="kde");


##### 7. Строим функции плотности вероятности (и гистограммы) для признаков и смотрим на распределения
plot_features = ['cnt_prd', 'NO_NDS_SUM_p', 'pa10', 'pa8', 'cnt_client_mng']
plt.figure(figsize=(10,20))
grids = gridspec.GridSpec(len(plot_features),1)
for i,j in enumerate(df[plot_features]):
    ax = plt.subplot(grids[i])
    sns.distplot(df[j][df.LABEL == 0], bins=30)
    sns.distplot(df[j][df.LABEL == 1], bins=30)
    ax.set_xlabel('')
    ax.set_title('Histogram for feature: ' + str(j))
plt.show()


##### 8.Корреляционная карта признаков
f, ax = plt.subplots(figsize=(8, 8))
plt.title('Pearson correlation coefficients of features')
sns.heatmap(df.astype(float).corr(),linewidths=0.25,vmax=1.0, square=True, linecolor='black');
