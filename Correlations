##### 1. Correlations with target variable
def CorrelationSelector(X,y):
    columns = X.columns[3:]
    corr_data = dict([(abs(np.corrcoef(X[c],y)[0,1]),c) for c in columns if math.isnan(abs(np.corrcoef(X[c],y)[0,1]))==False])
    sorted_corr_data = sorted(corr_data.items(), key=operator.itemgetter(0), reverse=True)
    return sorted_corr_data
corr = CorrelationSelector(X,y)
top_correlations = 10
corr_array = np.array(corr[:top_correlations])
plt.figure(figsize=(7,7))
plt.title("Top correlations")
plt.bar(range(top_correlations), corr_array[:,0][:top_correlations], align='center')
plt.xticks(range(top_correlations), corr_array[:,1][:top_correlations], rotation=90)
plt.xlim([-1, top_correlations]);


##### 2.Корреляционная карта признаков
f, ax = plt.subplots(figsize=(8, 8))
plt.title('Pearson correlation coefficients of features')
sns.heatmap(df.astype(float).corr(),linewidths=0.25,vmax=1.0, square=True, linecolor='black');


##### 3. ищем какие столбцы из датафрейма удалить - те столбцы, которые высоко скоррелированы между собой
import pandas as pd
import numpy as np

def find_correlation(df, thresh=0.9):
    """
    Given a numeric pd.DataFrame, this will find highly correlated features,
    and return a list of features to remove
    params:
    - df : pd.DataFrame
    - thresh : correlation threshold, will remove one of pairs of features with
               a correlation greater than this value
    """
    
    corrMatrix = df.corr()
    corrMatrix.loc[:,:] =  np.tril(corrMatrix, k=-1)

    already_in = set()
    result = []

    for col in corrMatrix:
        perfect_corr = corrMatrix[col][corrMatrix[col] > thresh].index.tolist()
        if perfect_corr and col not in already_in:
            already_in.update(set(perfect_corr))
            perfect_corr.append(col)
            result.append(perfect_corr)


    select_nested = [f[1:] for f in result]
    select_flat = [i for j in select_nested for i in j]
    return select_flat
