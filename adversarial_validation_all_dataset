#Set labels for train/test data
train_df = df_tr
train_df['TAR'] = 0
test_df = df_te
test_df['TAR'] = 1
# Get the combined data
total_df = pd.concat([train_df, test_df], axis=0).drop(['inn','id_date','label'], axis=1)
# Train and test
train_idx = range(0, len(train_df))
test_idx = range(len(train_df), len(total_df))

#Get labels
y = total_df.TAR.copy()
total_df.drop('TAR', axis = 1, inplace = True)

#Shuffle and split our set
from sklearn.model_selection import train_test_split
X_train, X_valid, y_train, y_valid = train_test_split(total_df, y, test_size=0.20, shuffle = True, random_state = 42)


import lightgbm as lgb
lgbm_params =  {
    'task': 'train',
    'boosting_type': 'gbdt',
    'objective': 'binary',
    'metric': 'auc',
    'num_leaves': 32,
    'learning_rate': 0.02,
    'verbose': 0,
    'lambda_l1': 1,
    'scale_pos_weight': 8  #for unbalanced labels
} 
lgtrain = lgb.Dataset(X_train, y_train)

lgvalid = lgb.Dataset(X_valid, y_valid)

lgb_clf = lgb.train(
    lgbm_params,
    lgtrain,
    num_boost_round=10000,
    valid_sets=[lgtrain, lgvalid],
    valid_names=['train','valid'],
    early_stopping_rounds=100,
    verbose_eval=100
        )

train_preds = lgb_clf.predict(total_df.iloc[train_idx])
train_df['prob_to_test'] = train_preds
val_set = train_df[train_df.prob_to_test>0.9] #train set with prob more than 90% to be test set
val_set.head()
